<?php
/**
 * AdministrateursApiInterfaceTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Tests\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BoulangerieApi
 *
 * The Boulangerie finally debugged for use, hosting service might need to be adapted
 *
 * OpenAPI spec version: 1.0.0
 * Contact: leafyteam@notaRealCompany.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Server\Tests\Api;

use Swagger\Server\Configuration;
use Swagger\Server\ApiClient;
use Swagger\Server\ApiException;
use Swagger\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * AdministrateursApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server\Tests\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdministrateursApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addAdmin
     *
     * add a new Admin.
     *
     */
    public function testAddAdmin()
    {
        $client = static::createClient();

        $path = '/adminstrateurs';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for changeAdminPw
     *
     * changing Admin's password.
     *
     */
    public function testChangeAdminPw()
    {
        $client = static::createClient();

        $path = '/administrateurs/{loginAdmin}';
        $pattern = '{loginAdmin}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path);
    }

    /**
     * Test case for deleteAdminbyLogin
     *
     * Deletes an Admin by login.
     *
     */
    public function testDeleteAdminbyLogin()
    {
        $client = static::createClient();

        $path = '/administrateurs/{loginAdmin}';
        $pattern = '{loginAdmin}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for getAdminById
     *
     * get Admin by Id.
     *
     */
    public function testGetAdminById()
    {
        $client = static::createClient();

        $path = '/administrateurs/{loginAdmin}';
        $pattern = '{loginAdmin}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getAdministrateurs
     *
     * get detailsCommandesBL by Id.
     *
     */
    public function testGetAdministrateurs()
    {
        $client = static::createClient();

        $path = '/adminstrateurs';

        $crawler = $client->request('GET', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
