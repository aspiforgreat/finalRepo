<?php
/**
 * Profils
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BoulangerieApi
 *
 * The Boulangerie finally debugged for use, hosting service might need to be adapted
 *
 * OpenAPI spec version: 1.0.0
 * Contact: leafyteam@notaRealCompany.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Profils model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Profils 
{
        /**
     * @var int
     * @SerializedName("matricule")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(9999)
     */
    protected $matricule;

    /**
     * @var string
     * @SerializedName("nom")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 50
     * )
     */
    protected $nom;

    /**
     * @var string|null
     * @SerializedName("affectation")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 20
     * )
     */
    protected $affectation;

    /**
     * @var string
     * @SerializedName("login")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 20
     * )
     */
    protected $login;

    /**
     * @var string
     * @SerializedName("password")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 20
     * )
     */
    protected $password;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->matricule = isset($data['matricule']) ? $data['matricule'] : null;
        $this->nom = isset($data['nom']) ? $data['nom'] : null;
        $this->affectation = isset($data['affectation']) ? $data['affectation'] : null;
        $this->login = isset($data['login']) ? $data['login'] : null;
        $this->password = isset($data['password']) ? $data['password'] : null;
    }

    /**
     * Gets matricule.
     *
     * @return int
     */
    public function getMatricule()
    {
        return $this->matricule;
    }

    /**
     * Sets matricule.
     *
     * @param int $matricule
     *
     * @return $this
     */
    public function setMatricule($matricule)
    {
        $this->matricule = $matricule;

        return $this;
    }

    /**
     * Gets nom.
     *
     * @return string
     */
    public function getNom()
    {
        return $this->nom;
    }

    /**
     * Sets nom.
     *
     * @param string $nom
     *
     * @return $this
     */
    public function setNom($nom)
    {
        $this->nom = $nom;

        return $this;
    }

    /**
     * Gets affectation.
     *
     * @return string|null
     */
    public function getAffectation()
    {
        return $this->affectation;
    }

    /**
     * Sets affectation.
     *
     * @param string|null $affectation
     *
     * @return $this
     */
    public function setAffectation($affectation = null)
    {
        $this->affectation = $affectation;

        return $this;
    }

    /**
     * Gets login.
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->login;
    }

    /**
     * Sets login.
     *
     * @param string $login
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->login = $login;

        return $this;
    }

    /**
     * Gets password.
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Sets password.
     *
     * @param string $password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }
}


